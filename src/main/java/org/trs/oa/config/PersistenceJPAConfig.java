package org.trs.oa.config;import java.util.Properties;import javax.persistence.EntityManagerFactory;import javax.sql.DataSource;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.config.ConfigurableBeanFactory;import org.springframework.context.annotation.*;import org.springframework.core.env.Environment;import org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor;import org.springframework.jdbc.datasource.DriverManagerDataSource;import org.springframework.orm.jpa.JpaTransactionManager;import org.springframework.orm.jpa.JpaVendorAdapter;import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;import org.springframework.transaction.PlatformTransactionManager;import org.springframework.transaction.annotation.EnableTransactionManagement;import org.springframework.web.context.request.RequestContextListener;import org.springframework.web.multipart.commons.CommonsMultipartResolver;@Configuration@EnableTransactionManagement@PropertySource("classpath:database.properties")@ComponentScan(basePackages = { "org.trs.oa" })public class PersistenceJPAConfig{   @Autowired   Environment env;   @Bean   public LocalContainerEntityManagerFactoryBean entityManagerFactory() {      LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();      em.setDataSource(dataSource());      em.setPackagesToScan("org.trs.oa.entity");       JpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();      em.setJpaVendorAdapter(vendorAdapter);      em.setJpaProperties(additionalProperties());       return em;   }    @Bean   public DataSource dataSource(){      DriverManagerDataSource dataSource = new DriverManagerDataSource();      dataSource.setDriverClassName(env.getProperty("jdbc.driverClassName"));      dataSource.setUrl(env.getProperty("jdbc.url"));      dataSource.setUsername( env.getProperty("jdbc.username"));      dataSource.setPassword( env.getProperty("jdbc.password"));      return dataSource;   }    @Bean   @Primary   public PlatformTransactionManager transactionManager(EntityManagerFactory emf){      JpaTransactionManager transactionManager = new JpaTransactionManager();      transactionManager.setEntityManagerFactory(emf);       return transactionManager;   }    @Bean(name = "filterMultipartResolver")    public CommonsMultipartResolver getMultipartResolver() {        return new CommonsMultipartResolver();    }   @Bean   public PersistenceExceptionTranslationPostProcessor exceptionTranslation(){      return new PersistenceExceptionTranslationPostProcessor();   }    Properties additionalProperties() {      Properties properties = new Properties();    //  properties.setProperty("hibernate.hbm2ddl.auto", "create-drop");      properties.setProperty("hibernate.dialect", "org.hibernate.dialect.MySQL5Dialect");      properties.setProperty("hibernate.show_sql", "true");      return properties;   }}