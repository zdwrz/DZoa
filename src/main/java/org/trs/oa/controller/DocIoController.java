package org.trs.oa.controller;import org.trs.oa.entity.ProjDocInfo;import org.trs.oa.exception.FileContentException;import org.trs.oa.service.DocumentService;import org.trs.oa.service.MessageService;import org.trs.oa.utility.Constants;import org.trs.oa.utility.FileUtils;import org.trs.oa.vo.DocSearchVO;import org.trs.oa.vo.FileUploadResponse;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.format.annotation.DateTimeFormat;import org.springframework.http.HttpStatus;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import java.io.*;import java.util.Date;@Controller@RequestMapping({"/doc"})public class DocIoController {    private final static Logger LOGGER = Logger.getLogger(DocIoController.class);    @RequestMapping("/create")    public String newDoc(ModelMap model) {        return "documents/uploadDoc";    }    @Value("${temp_file_location}")    String tempFileLocation;    @Autowired    DocumentService documentService;    @Autowired    MessageService msg;    @RequestMapping("/upload")    @ResponseBody    public String uploadProjDoc(@RequestParam("file") MultipartFile file, @RequestParam("project_id")String pid, @RequestParam("file_date") @DateTimeFormat(pattern="yyyy-MM-dd")Date fileDate, HttpSession session) throws FileContentException {        LOGGER.debug("File uploading ......");        String name = file.getOriginalFilename();        if (fileDate == null) {            fileDate = new Date();        }        if (!file.isEmpty()) {            try{                String id = pid.replace(Constants.PROJECT_ID_PREFIX, "");                documentService.saveFile(file,(int)session.getAttribute(Constants.USER_ID), Integer.parseInt(id),fileDate);                return msg.getMessage("file_uploaded_success",new String[]{name});            } catch (Exception e) {                LOGGER.error("error in uploading .. " + e.getLocalizedMessage());                throw new FileContentException("Failed to upload the file.");            }        } else {            throw new FileContentException( "You failed to upload " + name                    + " because the file was empty.");        }    }    @RequestMapping(value = "/download", method = RequestMethod.POST)    public void getProjFile(@RequestParam int fileId, HttpServletResponse response,                        HttpServletRequest request) throws IOException {        ProjDocInfo docInfo = documentService.getDocInfoById(fileId);        FileUtils.fileDownload(docInfo.getFileLocation(),docInfo.getDocName(),response, request);    }    @RequestMapping(value = "/delete", method = RequestMethod.POST)    @ResponseBody    public String removeProjFile(@RequestParam("doc_to_remove_id") int fileId, HttpServletResponse response,                            HttpServletRequest request) throws IOException {        LOGGER.info("delete: " + fileId);        documentService.removeDoc(fileId);        return "File is remove successfully!";    }    @RequestMapping("/manage")    public String findDocs(@ModelAttribute DocSearchVO docSearchVO) {        return "documents/findDoc";    }    @RequestMapping(value = "/manage", params = "search")    public String search(ModelMap model,@ModelAttribute DocSearchVO docSearchVO) {        return "documents/findDoc";    }    @ExceptionHandler(FileContentException.class)    @ResponseStatus(value = HttpStatus.BAD_REQUEST)    @ResponseBody    public FileUploadResponse handleFileContentException(FileContentException e){        LOGGER.error(e);        FileUploadResponse response = new FileUploadResponse();        response.setError(e.getMessage()); // has to be error field, front end js needs this        return response;    }    @ExceptionHandler(Exception.class)    @ResponseStatus(value = HttpStatus.BAD_REQUEST)    @ResponseBody    public FileUploadResponse handleException(Exception e){        LOGGER.error(e);        FileUploadResponse response = new FileUploadResponse();        response.setError(e.getMessage()); // has to be error field, front end js needs this        return response;    }}