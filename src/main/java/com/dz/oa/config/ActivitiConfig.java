package com.dz.oa.config;import org.activiti.engine.*;import org.activiti.spring.ProcessEngineFactoryBean;import org.activiti.spring.SpringProcessEngineConfiguration;import org.apache.commons.dbcp.BasicDataSource;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.DependsOn;import org.springframework.context.annotation.PropertySource;import org.springframework.core.env.Environment;import org.springframework.core.io.ClassPathResource;import org.springframework.core.io.Resource;import org.springframework.jdbc.datasource.DataSourceTransactionManager;import org.springframework.jdbc.datasource.DriverManagerDataSource;import org.springframework.transaction.annotation.EnableTransactionManagement;import javax.sql.DataSource;@Configuration@EnableTransactionManagement@PropertySource("classpath:database.properties")public class ActivitiConfig {   @Autowired   Environment env;   @Bean   public DataSource dataSourceActiviti(){      BasicDataSource dataSource = new BasicDataSource();      dataSource.setDriverClassName(env.getProperty("jdbc.driverClassName"));      dataSource.setUrl(env.getProperty("jdbc.url.activiti"));      dataSource.setUsername( env.getProperty("jdbc.username"));      dataSource.setPassword( env.getProperty("jdbc.password"));      return dataSource;   }   @Bean   public DataSourceTransactionManager dataSourceTransactionManager(){      DataSourceTransactionManager dataSourceTransactionManager = new DataSourceTransactionManager();      dataSourceTransactionManager.setDataSource(dataSourceActiviti());      return dataSourceTransactionManager;   }   @Bean   public SpringProcessEngineConfiguration processEngineConfiguration(){      SpringProcessEngineConfiguration configuration = new SpringProcessEngineConfiguration();      configuration.setDataSource(dataSourceActiviti());      configuration.setDatabaseType("mysql");      configuration.setTransactionManager(dataSourceTransactionManager());//      configuration.setDatabaseSchemaUpdate("true");      configuration.setDatabaseSchemaUpdate("create-drop");      configuration.setJobExecutorActivate(false);      ClassPathResource deployResource = new ClassPathResource("timesheet_submit_approval.bpmn");      ClassPathResource[] deployments = new ClassPathResource[]{deployResource};      configuration.setDeploymentResources(deployments);      return configuration;   }   @Bean   public ProcessEngine processEngine(SpringProcessEngineConfiguration springProcessEngineConfiguration) throws Exception {      ProcessEngineFactoryBean processEngineFactoryBean = new ProcessEngineFactoryBean();      processEngineFactoryBean.setProcessEngineConfiguration(springProcessEngineConfiguration);      return processEngineFactoryBean.getObject();   }   @Bean   public RepositoryService repositoryService(ProcessEngine processEngine) {      return processEngine.getRepositoryService();   }   @Bean   public RuntimeService runtimeService(ProcessEngine processEngine) {      return processEngine.getRuntimeService();   }   @Bean   public HistoryService historyService(ProcessEngine processEngine) {      return processEngine.getHistoryService();   }   @Bean   public ManagementService managementService(ProcessEngine processEngine) {      return processEngine.getManagementService();   }   @Bean   public IdentityService identityService(ProcessEngine processEngine) {      return processEngine.getIdentityService();   }   @Bean   public FormService formService(ProcessEngine processEngine) {      return processEngine.getFormService();   }   @Bean   public TaskService taskService(ProcessEngine processEngine) {      return processEngine.getTaskService();   }}